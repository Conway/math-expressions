import me from '../lib/math-expressions';

const allow_error_in_numbers = [
  {
    original: '65.2313',
    allowed_error: 0.0001,
    include_exponents: false,
    correct_answers: [
      '65.2313',
      '65.2313*1.00009',
      '65.2313*0.99991',
    ],
    at_least_one_incorrect_answer: [
      '65.2313*1.00011',
      '65.2313*0.99989',
    ],
  },
  {
    original: 'exp(5xy+c)',
    allowed_error: 0.0001,
    include_exponents: false,
    correct_answers: [
      'exp(5xy+c)',
      'exp(5*1.00009xy+c)',
      'exp(5*0.99991xy+c)'
    ],
    at_least_one_incorrect_answer: [
      'exp(5*1.0005xy+c)',
      'exp(5*0.9995xy+c)',
    ],
  },
  {
    original: 'exp(5xy+c)',
    allowed_error: 0.000001,
    include_exponents: false,
    correct_answers: [
      'exp(5xy+c)',
      'exp(5*1.0000009xy+c)',
      'exp(5*0.9999991xy+c)'
    ],
    at_least_one_incorrect_answer: [
      'exp(5*1.000005xy+c)',
      'exp(5*0.999995xy+c)'
    ],
  },
  {
    original: '10exp(5xy+c)',
    allowed_error: 0.000001,
    include_exponents: false,
    correct_answers: [
      '10exp(5xy+c)',
      '10exp(5*1.0000009xy+c)',
      '10exp(5*0.9999991xy+c)',
      '10*1.0000009exp(5xy+c)',
      '10*1.0000009exp(5*1.0000009xy+c)',
      '10*1.0000009exp(5*0.9999991xy+c)',
      '10*0.9999991exp(5xy+c)',
      '10*0.9999991exp(5*1.0000009xy+c)',
      '10*0.9999991exp(5*0.9999991xy+c)'
    ],
    at_least_one_incorrect_answer: [
      '10*1.000005exp(5*1.000005xy+c)',
      '10*1.000005exp(5*0.999995xy+c)',
      '10*0.999995exp(5*1.000005xy+c)',
      '10*0.999995exp(5*0.999995xy+c)'
    ],
  },
  {
    original: '10exp(0.01xy+1000q^2)',
    allowed_error: 0.0001,
    include_exponents: false,
    correct_answers: [
      '10exp(0.01xy+1000q^2)',
      '10*(1+.00002)exp(0.01*(1+.00002)xy+1000*(1+.00002)q^2)',
      '10*(1+.00002)exp(0.01*(1+.00002)xy+1000*(1-.00002)q^2)',
      '10*(1+.00002)exp(0.01*(1-.00002)xy+1000*(1-.00002)q^2)',
      '10*(1+.00002)exp(0.01*(1-.00002)xy+1000*(1-.00002)q^2)',
      '10*(1-.00002)exp(0.01*(1+.00002)xy+1000*(1+.00002)q^2)',
      '10*(1-.00002)exp(0.01*(1+.00002)xy+1000*(1-.00002)q^2)',
      '10*(1-.00002)exp(0.01*(1-.00002)xy+1000*(1-.00002)q^2)',
      '10*(1-.00002)exp(0.01*(1-.00002)xy+1000*(1-.00002)q^2)',
    ],
    at_least_one_incorrect_answer: [
      '10*(1+.0005)exp(0.01*(1+.0005)xy+1000*(1+.0005)q^2)',
      '10*(1+.0005)exp(0.01*(1+.0005)xy+1000*(1-.0005)q^2)',
      '10*(1+.0005)exp(0.01*(1-.0005)xy+1000*(1+.0005)q^2)',
      '10*(1+.0005)exp(0.01*(1-.0005)xy+1000*(1-.0005)q^2)',
      '10*(1-.0005)exp(0.01*(1+.0005)xy+1000*(1+.0005)q^2)',
      '10*(1-.0005)exp(0.01*(1+.0005)xy+1000*(1-.0005)q^2)',
      '10*(1-.0005)exp(0.01*(1-.0005)xy+1000*(1+.0005)q^2)',
      '10*(1-.0005)exp(0.01*(1-.0005)xy+1000*(1-.0005)q^2)',
    ],
  },
  {
    original: 'exp(0.01xy+1000q^2)',
    allowed_error: 0.0001,
    include_exponents: true,
    correct_answers: [
      'exp(0.01xy+1000q^2)',
      'exp(0.01xy+1000q^(2*(1+.00002)))',
      'exp(0.01xy+1000q^(2*(1-.00002)))',
      'exp(0.01*(1+.00002)xy+1000*(1+.00002)q^(2*(1+.00002)))',
      'exp(0.01*(1+.00002)xy+1000*(1-.00002)q^(2*(1+.00002)))',
      'exp(0.01*(1-.00002)xy+1000*(1-.00002)q^(2*(1+.00002)))',
      'exp(0.01*(1-.00002)xy+1000*(1-.00002)q^(2*(1+.00002)))',
      'exp(0.01*(1+.00002)xy+1000*(1+.00002)q^(2*(1-.00002)))',
      'exp(0.01*(1+.00002)xy+1000*(1-.00002)q^(2*(1-.00002)))',
      'exp(0.01*(1-.00002)xy+1000*(1-.00002)q^(2*(1-.00002)))',
      'exp(0.01*(1-.00002)xy+1000*(1-.00002)q^(2*(1-.00002)))',
    ],
    at_least_one_incorrect_answer: [
      'exp(0.01*(1+.0005)xy+1000*(1+.0005)q^(2*(1+.0005)))',
      'exp(0.01*(1+.0005)xy+1000*(1-.0005)q^(2*(1+.0005)))',
      'exp(0.01*(1-.0005)xy+1000*(1+.0005)q^(2*(1+.0005)))',
      'exp(0.01*(1-.0005)xy+1000*(1-.0005)q^(2*(1+.0005)))',
      'exp(0.01*(1+.0005)xy+1000*(1+.0005)q^(2*(1-.0005)))',
      'exp(0.01*(1+.0005)xy+1000*(1-.0005)q^(2*(1-.0005)))',
      'exp(0.01*(1-.0005)xy+1000*(1+.0005)q^(2*(1-.0005)))',
      'exp(0.01*(1-.0005)xy+1000*(1-.0005)q^(2*(1-.0005)))',
    ],
  },
  {
    original: 'exp(0.01xy+1000sqrt(q))',
    allowed_error: 0.0001,
    include_exponents: true,
    correct_answers: [
      'exp(0.01xy+1000sqrt(q))',
      'exp(0.01*(1+.00002)xy+1000sqrt(q))',
      'exp(0.01*(1-.00002)xy+1000sqrt(q))',
      'exp(0.01*(1+.00002)xy+1000*(1+.00002)q^(0.5*(1+.00002)))',
      'exp(0.01*(1+.00002)xy+1000*(1-.00002)q^(0.5*(1+.00002)))',
      'exp(0.01*(1-.00002)xy+1000*(1-.00002)q^(0.5*(1+.00002)))',
      'exp(0.01*(1-.00002)xy+1000*(1-.00002)q^(0.5*(1+.00002)))',
      'exp(0.01*(1+.00002)xy+1000*(1+.00002)q^(0.5*(1-.00002)))',
      'exp(0.01*(1+.00002)xy+1000*(1-.00002)q^(0.5*(1-.00002)))',
      'exp(0.01*(1-.00002)xy+1000*(1-.00002)q^(0.5*(1-.00002)))',
      'exp(0.01*(1-.00002)xy+1000*(1-.00002)q^(0.5*(1-.00002)))',
    ],
    at_least_one_incorrect_answer: [
      'exp(0.01*(1+.00011)xy+1000*(1+.00011)q^(0.5*(1+.00011)))',
      'exp(0.01*(1+.00011)xy+1000*(1-.00011)q^(0.5*(1+.00011)))',
      'exp(0.01*(1-.00011)xy+1000*(1+.00011)q^(0.5*(1+.00011)))',
      'exp(0.01*(1-.00011)xy+1000*(1-.00011)q^(0.5*(1+.00011)))',
      'exp(0.01*(1+.00011)xy+1000*(1+.00011)q^(0.5*(1-.00011)))',
      'exp(0.01*(1+.00011)xy+1000*(1-.00011)q^(0.5*(1-.00011)))',
      'exp(0.01*(1-.00011)xy+1000*(1+.00011)q^(0.5*(1-.00011)))',
      'exp(0.01*(1-.00011)xy+1000*(1-.00011)q^(0.5*(1-.00011)))',
    ],
  },
  {
    original: '10log(0.01xy+1000q^2)',
    allowed_error: 0.0001,
    include_exponents: false,
    correct_answers: [
      '10log(0.01xy+1000q^2)',
      '10*(1+.00009)log(0.01*(1+.00009)xy+1000*(1+.00009)q^2)',
      '10*(1+.00009)log(0.01*(1+.00009)xy+1000*(1-.00009)q^2)',
      '10*(1+.00009)log(0.01*(1-.00009)xy+1000*(1-.00009)q^2)',
      '10*(1+.00009)log(0.01*(1-.00009)xy+1000*(1-.00009)q^2)',
      '10*(1-.00009)log(0.01*(1+.00009)xy+1000*(1+.00009)q^2)',
      '10*(1-.00009)log(0.01*(1+.00009)xy+1000*(1-.00009)q^2)',
      '10*(1-.00009)log(0.01*(1-.00009)xy+1000*(1-.00009)q^2)',
      '10*(1-.00009)log(0.01*(1-.00009)xy+1000*(1-.00009)q^2)',
    ],
    at_least_one_incorrect_answer: [
      '10*(1+.00011)log(0.01*(1+.00011)xy+1000*(1+.00011)q^2)',
      '10*(1+.00011)log(0.01*(1+.00011)xy+1000*(1-.00011)q^2)',
      '10*(1+.00011)log(0.01*(1-.00011)xy+1000*(1+.00011)q^2)',
      '10*(1+.00011)log(0.01*(1-.00011)xy+1000*(1-.00011)q^2)',
      '10*(1-.00011)log(0.01*(1+.00011)xy+1000*(1+.00011)q^2)',
      '10*(1-.00011)log(0.01*(1+.00011)xy+1000*(1-.00011)q^2)',
      '10*(1-.00011)log(0.01*(1-.00011)xy+1000*(1+.00011)q^2)',
      '10*(1-.00011)log(0.01*(1-.00011)xy+1000*(1-.00011)q^2)',
    ],
  },
  {
    original: 'log(0.01xy+1000q^2)',
    allowed_error: 0.0001,
    include_exponents: true,
    correct_answers: [
      'log(0.01xy+1000q^2)',
      'log(0.01*(1+.00009)xy+1000*(1+.00009)q^(2*(1+.00009)))',
      'log(0.01*(1+.00009)xy+1000*(1-.00009)q^(2*(1+.00009)))',
      'log(0.01*(1-.00009)xy+1000*(1-.00009)q^(2*(1+.00009)))',
      'log(0.01*(1-.00009)xy+1000*(1-.00009)q^(2*(1+.00009)))',
      'log(0.01*(1+.00009)xy+1000*(1+.00009)q^(2*(1-.00009)))',
      'log(0.01*(1+.00009)xy+1000*(1-.00009)q^(2*(1-.00009)))',
      'log(0.01*(1-.00009)xy+1000*(1-.00009)q^(2*(1-.00009)))',
      'log(0.01*(1-.00009)xy+1000*(1-.00009)q^(2*(1-.00009)))',
    ],
    at_least_one_incorrect_answer: [
      'log(0.01*(1+.00011)xy+1000*(1+.00011)q^(2*(1+.00011)))',
      'log(0.01*(1+.00011)xy+1000*(1-.00011)q^(2*(1+.00011)))',
      'log(0.01*(1-.00011)xy+1000*(1+.00011)q^(2*(1+.00011)))',
      'log(0.01*(1-.00011)xy+1000*(1-.00011)q^(2*(1+.00011)))',
      'log(0.01*(1+.00011)xy+1000*(1+.00011)q^(2*(1-.00011)))',
      'log(0.01*(1+.00011)xy+1000*(1-.00011)q^(2*(1-.00011)))',
      'log(0.01*(1-.00011)xy+1000*(1+.00011)q^(2*(1-.00011)))',
      'log(0.01*(1-.00011)xy+1000*(1-.00011)q^(2*(1-.00011)))',
    ],
  },
  {
    original: 'log(0.01xy+1000sqrt(q))',
    allowed_error: 0.0001,
    include_exponents: true,
    correct_answers: [
      'log(0.01xy+1000sqrt(q))',
      'log(0.01*(1+.00009)xy+1000sqrt(q))',
      'log(0.01*(1-.00009)xy+1000sqrt(q))',
      'log(0.01*(1+.00009)xy+1000*(1+.00009)q^(0.5*(1+.00009)))',
      'log(0.01*(1+.00009)xy+1000*(1-.00009)q^(0.5*(1+.00009)))',
      'log(0.01*(1-.00009)xy+1000*(1-.00009)q^(0.5*(1+.00009)))',
      'log(0.01*(1-.00009)xy+1000*(1-.00009)q^(0.5*(1+.00009)))',
      'log(0.01*(1+.00009)xy+1000*(1+.00009)q^(0.5*(1-.00009)))',
      'log(0.01*(1+.00009)xy+1000*(1-.00009)q^(0.5*(1-.00009)))',
      'log(0.01*(1-.00009)xy+1000*(1-.00009)q^(0.5*(1-.00009)))',
      'log(0.01*(1-.00009)xy+1000*(1-.00009)q^(0.5*(1-.00009)))',
    ],
    at_least_one_incorrect_answer: [
      'log(0.01*(1+.00011)xy+1000*(1+.00011)q^(0.5*(1+.00011)))',
      'log(0.01*(1+.00011)xy+1000*(1-.00011)q^(0.5*(1+.00011)))',
      'log(0.01*(1-.00011)xy+1000*(1+.00011)q^(0.5*(1+.00011)))',
      'log(0.01*(1-.00011)xy+1000*(1-.00011)q^(0.5*(1+.00011)))',
      'log(0.01*(1+.00011)xy+1000*(1+.00011)q^(0.5*(1-.00011)))',
      'log(0.01*(1+.00011)xy+1000*(1-.00011)q^(0.5*(1-.00011)))',
      'log(0.01*(1-.00011)xy+1000*(1+.00011)q^(0.5*(1-.00011)))',
      'log(0.01*(1-.00011)xy+1000*(1-.00011)q^(0.5*(1-.00011)))',
    ],
  },
  {
    original: '(0.1x^2+90a+b)/(cx^2+d+0.01)',
    allowed_error: 0.0001,
    include_exponents: false,
    correct_answers: [
      '(0.1x^2+90a+b)/(cx^2+d+0.01)',
      '(0.1*(1+.00009)x^2+90*(1+.00009)a+b)/(cx^2+d+0.01*(1+.00009))',
      '(0.1*(1+.00009)x^2+90*(1+.00009)a+b)/(cx^2+d+0.01*(1-.00009))',
      '(0.1*(1+.00009)x^2+90*(1-.00009)a+b)/(cx^2+d+0.01*(1+.00009))',
      '(0.1*(1+.00009)x^2+90*(1-.00009)a+b)/(cx^2+d+0.01*(1-.00009))',
      '(0.1*(1-.00009)x^2+90*(1+.00009)a+b)/(cx^2+d+0.01*(1+.00009))',
      '(0.1*(1-.00009)x^2+90*(1+.00009)a+b)/(cx^2+d+0.01*(1-.00009))',
      '(0.1*(1-.00009)x^2+90*(1-.00009)a+b)/(cx^2+d+0.01*(1+.00009))',
      '(0.1*(1-.00009)x^2+90*(1-.00009)a+b)/(cx^2+d+0.01*(1-.00009))',
    ],
    at_least_one_incorrect_answer: [
      '(0.1*(1+.00011)x^2+90*(1+.00011)a+b)/(cx^2+d+0.01*(1+.00011))',
      '(0.1*(1+.00011)x^2+90*(1+.00011)a+b)/(cx^2+d+0.01*(1-.00011))',
      '(0.1*(1+.00011)x^2+90*(1-.00011)a+b)/(cx^2+d+0.01*(1+.00011))',
      '(0.1*(1+.00011)x^2+90*(1-.00011)a+b)/(cx^2+d+0.01*(1-.00011))',
      '(0.1*(1-.00011)x^2+90*(1+.00011)a+b)/(cx^2+d+0.01*(1+.00011))',
      '(0.1*(1-.00011)x^2+90*(1+.00011)a+b)/(cx^2+d+0.01*(1-.00011))',
      '(0.1*(1-.00011)x^2+90*(1-.00011)a+b)/(cx^2+d+0.01*(1+.00011))',
      '(0.1*(1-.00011)x^2+90*(1-.00011)a+b)/(cx^2+d+0.01*(1-.00011))',
    ],
  },
  {
    original: '10 exp(7x^2/(3-sqrt(y)))',
    allowed_error: 0.0001,
    include_exponents: false,
    correct_answers: [
      '10 exp(7x^2/(3-sqrt(y)))',
      '10*(1+.00009)exp(7*(1+.00009)x^2/(3*(1+.00009)-sqrt(y)))',
      '10*(1+.00009)exp(7*(1+.00009)x^2/(3*(1-.00009)-sqrt(y)))',
      '10*(1+.00009)exp(7*(1-.00009)x^2/(3*(1+.00009)-sqrt(y)))',
      '10*(1+.00009)exp(7*(1-.00009)x^2/(3*(1-.00009)-sqrt(y)))',
      '10*(1-.00009)exp(7*(1+.00009)x^2/(3*(1+.00009)-sqrt(y)))',
      '10*(1-.00009)exp(7*(1+.00009)x^2/(3*(1-.00009)-sqrt(y)))',
      '10*(1-.00009)exp(7*(1-.00009)x^2/(3*(1+.00009)-sqrt(y)))',
      '10*(1-.00009)exp(7*(1-.00009)x^2/(3*(1-.00009)-sqrt(y)))',
    ],
    at_least_one_incorrect_answer: [
      '10*(1+.0002)exp(7*(1+.0002)x^2/(3*(1+.0002)-sqrt(y)))',
      '10*(1+.0002)exp(7*(1+.0002)x^2/(3*(1-.0002)-sqrt(y)))',
      '10*(1+.0002)exp(7*(1-.0002)x^2/(3*(1+.0002)-sqrt(y)))',
      '10*(1+.0002)exp(7*(1-.0002)x^2/(3*(1-.0002)-sqrt(y)))',
      '10*(1-.0002)exp(7*(1+.0002)x^2/(3*(1+.0002)-sqrt(y)))',
      '10*(1-.0002)exp(7*(1+.0002)x^2/(3*(1-.0002)-sqrt(y)))',
      '10*(1-.0002)exp(7*(1-.0002)x^2/(3*(1+.0002)-sqrt(y)))',
      '10*(1-.0002)exp(7*(1-.0002)x^2/(3*(1-.0002)-sqrt(y)))',
    ],
  },
]



for (let objectToTest of allow_error_in_numbers) {
  describe("allow error in numbers for " + objectToTest.original, function () {

    let orig = me.fromText(objectToTest.original)
    for (let option of objectToTest.correct_answers) {
      let ans = me.fromText(option);
      test(option + " is correct", () => {

        expect(orig.equals(ans, {
          allowed_error_in_numbers: objectToTest.allowed_error,
          include_error_in_number_exponents: objectToTest.include_exponents
        })).toBeTruthy();
      });
    }
    test('at least one of ' + objectToTest.at_least_one_incorrect_answer + " is incorrect", () => {
      let found_incorrect = false;
      for (let option of objectToTest.at_least_one_incorrect_answer) {
        let ans = me.fromText(option);
        let result = orig.equals(ans, {
          allowed_error_in_numbers: objectToTest.allowed_error,
          include_error_in_number_exponents: objectToTest.include_exponents
        });
        if (!result) {
          found_incorrect = true;
          break;
        }
      }
      expect(found_incorrect).toBeTruthy();
    });

  });
}


